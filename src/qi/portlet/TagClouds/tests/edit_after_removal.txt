Editing the portlet after a subject that is in the restricted or filtered
subjects has been removed.

Setting up the test

Here we kick off the ZOPE test browser package.

    >>> app = layer['app']
    >>> portal = layer['portal']
    >>> portal_url = portal.absolute_url()
    >>> portal_url
    'http://nohost/plone'

    >>> portal.error_log._ignored_exceptions = ()

Now we log in to the site to set up the content type

    >>> from plone.app.testing import TEST_USER_ID
    >>> from plone.app.testing import TEST_USER_NAME
    >>> from plone.app.testing import TEST_USER_PASSWORD
    >>> from plone.app.testing import SITE_OWNER_NAME
    >>> from plone.app.testing import SITE_OWNER_PASSWORD

Use the login page instead of the login portlet (which may be inactive):

    >>> from plone.testing.z2 import Browser
    >>> browser = Browser(app)
    >>> browser.open(portal_url + '/login')
    >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
    >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
    >>> browser.getControl(name='submit').click()

    >>> from zope.component import getUtility
    >>> from plone.portlets.interfaces import IPortletType
    >>> removemeid = portal.invokeFactory('Document','removeme')
    >>> portal.removeme.editMetadata(subject=['toremove'])
    >>> portal.portal_workflow.doActionFor(portal.removeme, 'publish')
    >>> portlet = getUtility(IPortletType, name='qi.portlet.TagClouds.TagCloudPortlet')
    >>> request = portal.REQUEST
    >>> mapping = portal.restrictedTraverse('++contextportlets++plone.leftcolumn')
    >>> addview = mapping.restrictedTraverse('+/' + portlet.addview)
    >>> addview.createAndAdd(data={'restrictSubjects':['toremove'],'refreshInterval':1})
    
    >>> browser.open("http://nohost/plone")
    >>> browser.contents
    '...toremove...'
    >>> del portal[removemeid]
    >>> browser.open('http://nohost/plone/++contextportlets++plone.leftcolumn/tag-cloud-portlet/edit')
    >>> 'toremove' not in browser.contents
    True
